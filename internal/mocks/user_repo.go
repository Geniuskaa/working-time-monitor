// Code generated by MockGen. DO NOT EDIT.
// Source: scb-mobile/scb-monitor/scb-monitor-backend/go-app/internal/postgres (interfaces: UserRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	postgres "scb-mobile/scb-monitor/scb-monitor-backend/go-app/internal/postgres"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// AddSkillsToUserProfile mocks base method.
func (m *MockUserRepo) AddSkillsToUserProfile(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSkillsToUserProfile", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSkillsToUserProfile indicates an expected call of AddSkillsToUserProfile.
func (mr *MockUserRepoMockRecorder) AddSkillsToUserProfile(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSkillsToUserProfile", reflect.TypeOf((*MockUserRepo)(nil).AddSkillsToUserProfile), arg0, arg1, arg2, arg3)
}

// GetEmplList mocks base method.
func (m *MockUserRepo) GetEmplList(arg0 context.Context) ([]*postgres.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmplList", arg0)
	ret0, _ := ret[0].([]*postgres.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmplList indicates an expected call of GetEmplList.
func (mr *MockUserRepoMockRecorder) GetEmplList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmplList", reflect.TypeOf((*MockUserRepo)(nil).GetEmplList), arg0)
}

// GetUser mocks base method.
func (m *MockUserRepo) GetUser(arg0 context.Context, arg1 int) (*postgres.User, *postgres.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*postgres.User)
	ret1, _ := ret[1].(*postgres.Employee)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserRepoMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserRepo)(nil).GetUser), arg0, arg1)
}

// GetUserPrincipalByUsername mocks base method.
func (m *MockUserRepo) GetUserPrincipalByUsername(arg0 context.Context, arg1 string) (*postgres.UserPrincipal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPrincipalByUsername", arg0, arg1)
	ret0, _ := ret[0].(*postgres.UserPrincipal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPrincipalByUsername indicates an expected call of GetUserPrincipalByUsername.
func (mr *MockUserRepoMockRecorder) GetUserPrincipalByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPrincipalByUsername", reflect.TypeOf((*MockUserRepo)(nil).GetUserPrincipalByUsername), arg0, arg1)
}

// GetUsersByEmplId mocks base method.
func (m *MockUserRepo) GetUsersByEmplId(arg0 context.Context, arg1 int) ([]*postgres.UserWithProjects, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByEmplId", arg0, arg1)
	ret0, _ := ret[0].([]*postgres.UserWithProjects)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByEmplId indicates an expected call of GetUsersByEmplId.
func (mr *MockUserRepoMockRecorder) GetUsersByEmplId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByEmplId", reflect.TypeOf((*MockUserRepo)(nil).GetUsersByEmplId), arg0, arg1)
}

// PutProfilesToDB mocks base method.
func (m *MockUserRepo) PutProfilesToDB(arg0 context.Context, arg1 []postgres.UserProfileFromExcel) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutProfilesToDB", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutProfilesToDB indicates an expected call of PutProfilesToDB.
func (mr *MockUserRepoMockRecorder) PutProfilesToDB(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutProfilesToDB", reflect.TypeOf((*MockUserRepo)(nil).PutProfilesToDB), arg0, arg1)
}
