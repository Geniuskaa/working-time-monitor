// Code generated by MockGen. DO NOT EDIT.
// Source: scb-mobile/scb-monitor/scb-monitor-backend/go-app/internal/postgres (interfaces: DeviceRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	model "scb-mobile/scb-monitor/scb-monitor-backend/go-app/internal/model"

	gomock "github.com/golang/mock/gomock"
)

// MockDeviceRepo is a mock of DeviceRepo interface.
type MockDeviceRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceRepoMockRecorder
}

// MockDeviceRepoMockRecorder is the mock recorder for MockDeviceRepo.
type MockDeviceRepoMockRecorder struct {
	mock *MockDeviceRepo
}

// NewMockDeviceRepo creates a new mock instance.
func NewMockDeviceRepo(ctrl *gomock.Controller) *MockDeviceRepo {
	mock := &MockDeviceRepo{ctrl: ctrl}
	mock.recorder = &MockDeviceRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceRepo) EXPECT() *MockDeviceRepoMockRecorder {
	return m.recorder
}

// GetLatestRentingDeviceByDeviceId mocks base method.
func (m *MockDeviceRepo) GetLatestRentingDeviceByDeviceId(arg0 context.Context, arg1 int) (*model.RentingDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestRentingDeviceByDeviceId", arg0, arg1)
	ret0, _ := ret[0].(*model.RentingDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestRentingDeviceByDeviceId indicates an expected call of GetLatestRentingDeviceByDeviceId.
func (mr *MockDeviceRepoMockRecorder) GetLatestRentingDeviceByDeviceId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestRentingDeviceByDeviceId", reflect.TypeOf((*MockDeviceRepo)(nil).GetLatestRentingDeviceByDeviceId), arg0, arg1)
}

// GetMobileDeviceById mocks base method.
func (m *MockDeviceRepo) GetMobileDeviceById(arg0 context.Context, arg1 int) (*model.MobileDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMobileDeviceById", arg0, arg1)
	ret0, _ := ret[0].(*model.MobileDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMobileDeviceById indicates an expected call of GetMobileDeviceById.
func (mr *MockDeviceRepoMockRecorder) GetMobileDeviceById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMobileDeviceById", reflect.TypeOf((*MockDeviceRepo)(nil).GetMobileDeviceById), arg0, arg1)
}

// GetMobileDevices mocks base method.
func (m *MockDeviceRepo) GetMobileDevices(arg0 context.Context) ([]*model.MobileDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMobileDevices", arg0)
	ret0, _ := ret[0].([]*model.MobileDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMobileDevices indicates an expected call of GetMobileDevices.
func (mr *MockDeviceRepoMockRecorder) GetMobileDevices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMobileDevices", reflect.TypeOf((*MockDeviceRepo)(nil).GetMobileDevices), arg0)
}

// GetMobileDevicesByOs mocks base method.
func (m *MockDeviceRepo) GetMobileDevicesByOs(arg0 context.Context, arg1 string) ([]*model.MobileDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMobileDevicesByOs", arg0, arg1)
	ret0, _ := ret[0].([]*model.MobileDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMobileDevicesByOs indicates an expected call of GetMobileDevicesByOs.
func (mr *MockDeviceRepoMockRecorder) GetMobileDevicesByOs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMobileDevicesByOs", reflect.TypeOf((*MockDeviceRepo)(nil).GetMobileDevicesByOs), arg0, arg1)
}

// GetRentingDeviceById mocks base method.
func (m *MockDeviceRepo) GetRentingDeviceById(arg0 context.Context, arg1 int) (*model.RentingDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRentingDeviceById", arg0, arg1)
	ret0, _ := ret[0].(*model.RentingDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRentingDeviceById indicates an expected call of GetRentingDeviceById.
func (mr *MockDeviceRepoMockRecorder) GetRentingDeviceById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRentingDeviceById", reflect.TypeOf((*MockDeviceRepo)(nil).GetRentingDeviceById), arg0, arg1)
}

// SaveRentingDevice mocks base method.
func (m *MockDeviceRepo) SaveRentingDevice(arg0 context.Context, arg1 *model.RentingDevice) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRentingDevice", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveRentingDevice indicates an expected call of SaveRentingDevice.
func (mr *MockDeviceRepoMockRecorder) SaveRentingDevice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRentingDevice", reflect.TypeOf((*MockDeviceRepo)(nil).SaveRentingDevice), arg0, arg1)
}

// UpdateRentingDevice mocks base method.
func (m *MockDeviceRepo) UpdateRentingDevice(arg0 context.Context, arg1 int, arg2 *model.RentingDevice) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRentingDevice", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRentingDevice indicates an expected call of UpdateRentingDevice.
func (mr *MockDeviceRepoMockRecorder) UpdateRentingDevice(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRentingDevice", reflect.TypeOf((*MockDeviceRepo)(nil).UpdateRentingDevice), arg0, arg1, arg2)
}
